<div id="section-{{ section.id }}" class="site-box-container image-container container--fullscreen">
  {%- if section.settings.link != blank -%}
    <a href="{{ section.settings.link }}" {% if section.settings.target %} target="_blank" {% endif %}>
  {%- endif -%}

    {%- unless section.settings.image == blank -%}
      {%- assign image = section.settings.image -%}

      <div class="blank-image" style="height: 100vh; overflow: hidden;">
        <div class="scene" style="height: 100%; perspective: none; position: relative;">
          <div style="perspective: 300px;" class="cube">
            <!-- Apply perspective effect to the image -->
            <img
              src="{{ image | image_url: width: 640 }}" alt="{{ image.alt | strip_html | escape }}"
              srcset="{{ image | image_url: width: 320 }} 320w, {{ image | image_url: width: 480 }} 480w, {{ image | image_url: width: 640 }} 640w, {{ image | image_url: width: 840 }} 840w, {{ image | image_url: width: 1080 }} 1080w, {{ image | image_url: width: 1280 }} 1280w, {{ image | image_url: width: 1540 }} 1540w, {{ image | image_url: width: 1860 }} 1860w, {{ image | image_url: width: 2100 }} 2100w"
              sizes="100vw"
              width="{{ image.width }}" height="{{ image.height }}"
              {% unless preload %} loading="lazy" {% endunless %} class="lazy cube__image"
              onload="this.classList.add('lazyloaded')"
              style="width: 100%; height: 100vh; object-fit: cover; transform: translateY(0) translateZ(0); transition: transform 0.3s ease;"
            />
            <img class="logo-image" src="https://cdn.shopify.com/s/files/1/0635/9731/4234/files/Group_2.svg?v=1701696688" width="100%"/>
          </div>
        </div>
      </div>

    {%- else -%}
      <div class="box__blank-image" style="height: 100vh; overflow: hidden;">
        <span class="onboarding-svg section--image-text--item__image onboarding-background">
          {{ 'image' | placeholder_svg_tag }}
        </span>
      </div>
    {%- endunless -%}

  {%- if section.settings.link != blank -%} </a> {%- endif -%}
</div>

<style>
  .logo-image {
    position: absolute;
    left: 0;
    top: 75%;
    transition: width 0.3s ease, left 0.3s ease, top 0.3s ease;
  }
</style>

<script>
  var section = document.getElementById("section-{{ section.id }}");
  var scene = document.querySelector('.scene');
  var imageContainer = document.querySelector('.cube__image');
  var logoImage = document.querySelector('.logo-image');
  var isSticky = true;
  var initialPadding = 400;
  var initialLogoWidth = 100;
  var initialTop = 75;

  function updateTransformOnScroll() {
    var scrollPosition = window.scrollY || window.pageYOffset;
    var translateY = Math.max(0, Math.min(scrollPosition, initialPadding)); // Limit translateY between 0 and initialPadding
    var translateZ = -Math.max(0, Math.min(scrollPosition, initialPadding)); // Limit translateZ between 0 and -initialPadding

    imageContainer.style.transform = 'translateY(' + translateY * 1.5 + 'px) translateZ(' + translateZ + 'px)';
  }

  function updatePerspectiveOnScroll() {
    var scrollPosition = window.scrollY || window.pageYOffset;

    if (scrollPosition >= initialPadding) {
      section.style.paddingBottom = "0";
      scene.style.perspective = 'none';
      logoImage.style.width = "20%"; // Change to your desired final width
      logoImage.style.left = "40%"; // Change to your desired final left position
      logoImage.style.top = "30%"; // Change to your desired final top position
    } else {
      section.style.paddingBottom = initialPadding - scrollPosition + "px";
      scene.style.perspective = scrollPosition + 'px';
      // Adjust the width based on the scroll position
      logoImage.style.width = initialLogoWidth - (scrollPosition / initialPadding) * (initialLogoWidth - 20) + "%";
      // Adjust the left position based on the scroll position
      logoImage.style.left = (scrollPosition / initialPadding) * 40 + "%";
      // Adjust the top position based on the scroll position
      logoImage.style.top = initialTop - (scrollPosition / initialPadding) * (initialTop - 80) + "%";
    }

    if (scrollPosition >= initialPadding && isSticky) {
      section.style.position = 'static';
      isSticky = false;
    } else if (scrollPosition < initialPadding && !isSticky) {
      section.style.position = 'sticky';
      isSticky = true;
    }
  }

  window.addEventListener('scroll', function () {
    updatePerspectiveOnScroll();
    updateTransformOnScroll();
  });

  section.style.paddingBottom = initialPadding + "px"; // Initial paddingBottom setting
</script>

{% schema %}
  {
    "name": "Perspective Image",
    "class": "index-section",
    "settings": [
      {
        "type": "image_picker",
        "id": "image",
        "label": "t:sections.image.name"
      },
      {
        "type": "url",
        "id": "link",
        "label": "t:sections.local-extra-words.sections.announcement-bar.blocks.content.settings.link"
      },
      {
        "type": "checkbox",
        "id": "target",
        "label": "t:sections.local-extra-words.sections.announcement-bar.blocks.content.settings.target",
        "default": false
      }
    ],
    "presets": [
      {
        "name": "Perspective Image"
      }
    ],
    "disabled_on": {
      "groups": ["custom.overlay", "header"]
    }
  }
{% endschema %}
